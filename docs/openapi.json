{
  "openapi": "3.0.0",
  "info": {
    "title": "${APP_NAME}",
    "version": "${APP_VERSION}",
    "description": "The idle tank hosting service"
  },
  "tags": [
    {
      "name": "Business",
      "description": "These are endpoints that contain the actual business logic of the service"
    },
    {
      "name": "Playground",
      "description": "These are endpoints that help doing demos"
    },
    {
      "name": "Utility",
      "description": "These are endpoints that help validate or configure the service"
    }
  ],
  "servers": [
    {
      "url": "https://localhost:${APP_PORT}/",
      "description": "URL when testing inside docker instance"
    },
    {
      "url": "https://www.${APP_NAME}-${APP_MAJOR_VER}.com:${APP_PORT}/",
      "description": "URL when testing inside docker instance"
    }
  ],
  "paths": {
    "/health": {
      "summary": "Generic health check endpoint",
      "description": "Used by kubernetes to check whether the service is reachable. Returns the version info of the service.",
      "get": {
        "tags": [
          "Utility"
        ],
        "responses": {
          "200": {
            "description": "The sematic version of the application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Version"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Version": {
        "type": "string",
        "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$",
        "example": "${APP_VERSION}"
      },
      "UUID": {
        "type": "string",
        "format": "uuid",
        "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
        "example": "00000000-0000-0000-0000-000000000000"
      },
      "RequestError": {
        "type": "object",
        "required": [
          "type",
          "code",
          "messages"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "description": "The corresponding error number.\n* 2 - InvalidOperation\n* 3 - BadRequest\n* 4 - CircuitBreak\n* 5 - OperationLock\n",
            "enum": [
              2,
              3,
              4,
              5
            ]
          },
          "type": {
            "type": "string",
            "description": "An error type indicating what went wrong.\n* InvalidOperation - Operation (method) not allowed\n* BadRequest - Request URI or body is invalid\n* CircuitBreak - Operation refused due to circuit break\n* OperationLock - Operation refused due to mutex lock\n",
            "enum": [
              "InvalidOperation",
              "BadRequest",
              "CircuitBreak",
              "OperationLock"
            ]
          },
          "messages": {
            "type": "array",
            "description": "Human readable messages indicating what went wrong.",
            "items": {
              "type": "string",
              "description": "Single error message of the error stack."
            }
          }
        }
      },
      "ResponseError": {
        "type": "object",
        "required": [
          "type",
          "code",
          "messages"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "description": "The corresponding error number.\n* 1 - GeneralFailure\n",
            "enum": [
              1
            ]
          },
          "type": {
            "type": "string",
            "description": "An error type indicating what went wrong.\n* GeneralFailure - An error occurred during execution\n",
            "enum": [
              "GeneralFailure"
            ]
          },
          "messages": {
            "type": "array",
            "description": "Human readable messages indicating what went wrong.",
            "items": {
              "type": "string",
              "description": "Single error message of the error stack."
            }
          }
        }
      }
    }
  }
}
